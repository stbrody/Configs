Controllers should be thin wrappers around Service class functions.  Controllers should handle serializing/deserializing the request/response but that's about it.  All the business logic should be handled in a single function call to a Service class that the controller delegates to.

When designing an implemention plan for a refactoring to move business logic from a function in an controller down into a service, please keep in mind that there should be no behavior changes and we should minimize changes to logic and code structure.  As much as possible, these refactorings should be simple code motion - just moving the same code from one place to a different place.  If there are places where things will need to change either for correctness or code simplicity and maintainability, please call it out explicitly.

First, check what function(s) the controller is already delegating to and see if those functions are used anywhere else and whether we can simply push the logic from the controller down into an existing function.  Prefer reusing existing functions over making new functions, especially if we're just introducing multiple layers of call hierarchy for no specific reason.  Note that this is different than having specialized helper functions that encapsulate logical units of work, those are still a good idea.  When pushing logic down into existing service methods, consider if any code is now redundant and can be de-duplicated.  Remember to preserve overall existing functionality and don't change behavior for the end user though!

Now, can you please propose an implementation plan (don't change any code yet) to refactor AdminController.setupAdmin?
